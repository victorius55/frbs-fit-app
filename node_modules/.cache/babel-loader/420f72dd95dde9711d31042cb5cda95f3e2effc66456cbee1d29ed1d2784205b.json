{"ast":null,"code":"import { Fragment as _Fragment, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode } from \"vue\";\n// Composables\nimport { useColor } from \"./color.js\"; // Utilities\nimport { toRef, toValue } from 'vue';\nimport { getCurrentInstanceName, propsFactory } from \"../util/index.js\"; // Types\nexport const allowedVariants = ['elevated', 'flat', 'tonal', 'outlined', 'text', 'plain'];\nexport function genOverlays(isClickable, name) {\n  return _createElementVNode(_Fragment, null, [isClickable && _createElementVNode(\"span\", {\n    \"key\": \"overlay\",\n    \"class\": _normalizeClass(`${name}__overlay`)\n  }, null), _createElementVNode(\"span\", {\n    \"key\": \"underlay\",\n    \"class\": _normalizeClass(`${name}__underlay`)\n  }, null)]);\n}\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String,\n    default: 'elevated',\n    validator: v => allowedVariants.includes(v)\n  }\n}, 'variant');\nexport function useVariant(props) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  const variantClasses = toRef(() => {\n    const {\n      variant\n    } = toValue(props);\n    return `${name}--variant-${variant}`;\n  });\n  const {\n    colorClasses,\n    colorStyles\n  } = useColor(() => {\n    const {\n      variant,\n      color\n    } = toValue(props);\n    return {\n      [['elevated', 'flat'].includes(variant) ? 'background' : 'text']: color\n    };\n  });\n  return {\n    colorClasses,\n    colorStyles,\n    variantClasses\n  };\n}","map":{"version":3,"names":["useColor","toRef","toValue","getCurrentInstanceName","propsFactory","allowedVariants","genOverlays","isClickable","name","_createElementVNode","_Fragment","_normalizeClass","makeVariantProps","color","String","variant","type","default","validator","v","includes","useVariant","props","arguments","length","undefined","variantClasses","colorClasses","colorStyles"],"sources":["../../src/composables/variant.tsx"],"sourcesContent":["// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { toRef, toValue } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { MaybeRefOrGetter, PropType } from 'vue'\n\nexport const allowedVariants = [\n  'elevated',\n  'flat',\n  'tonal',\n  'outlined',\n  'text',\n  'plain',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <span key=\"overlay\" class={ `${name}__overlay` } /> }\n\n      <span key=\"underlay\" class={ `${name}__underlay` } />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'elevated',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRefOrGetter<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = toRef(() => {\n    const { variant } = toValue(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(() => {\n    const { variant, color } = toValue(props)\n    return {\n      [['elevated', 'flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  })\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"],"mappings":";AAAA;AAAA,SACSA,QAAQ,sBAEjB;AACA,SAASC,KAAK,EAAEC,OAAO,QAAQ,KAAK;AAAA,SAC3BC,sBAAsB,EAAEC,YAAY,4BAE7C;AAGA,OAAO,MAAMC,eAAe,GAAG,CAC7B,UAAU,EACV,MAAM,EACN,OAAO,EACP,UAAU,EACV,MAAM,EACN,OAAO,CACC;AASV,OAAO,SAASC,WAAWA,CAAEC,WAAoB,EAAEC,IAAY,EAAE;EAC/D,OAAAC,mBAAA,CAAAC,SAAA,SAEMH,WAAW,IAAAE,mBAAA;IAAA;IAAA,SAAAE,eAAA,CAAgC,GAAGH,IAAI,WAAW;EAAA,QAAK,EAAAC,mBAAA;IAAA;IAAA,SAAAE,eAAA,CAEvC,GAAGH,IAAI,YAAY;EAAA;AAGtD;AAEA,OAAO,MAAMI,gBAAgB,GAAGR,YAAY,CAAC;EAC3CS,KAAK,EAAEC,MAAM;EACbC,OAAO,EAAE;IACPC,IAAI,EAAEF,MAA2B;IACjCG,OAAO,EAAE,UAAU;IACnBC,SAAS,EAAGC,CAAM,IAAKd,eAAe,CAACe,QAAQ,CAACD,CAAC;EACnD;AACF,CAAC,EAAE,SAAS,CAAC;AAEb,OAAO,SAASE,UAAUA,CACxBC,KAAqC,EAErC;EAAA,IADAd,IAAI,GAAAe,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGpB,sBAAsB,CAAC,CAAC;EAE/B,MAAMuB,cAAc,GAAGzB,KAAK,CAAC,MAAM;IACjC,MAAM;MAAEc;IAAQ,CAAC,GAAGb,OAAO,CAACoB,KAAK,CAAC;IAClC,OAAO,GAAGd,IAAI,aAAaO,OAAO,EAAE;EACtC,CAAC,CAAC;EAEF,MAAM;IAAEY,YAAY;IAAEC;EAAY,CAAC,GAAG5B,QAAQ,CAAC,MAAM;IACnD,MAAM;MAAEe,OAAO;MAAEF;IAAM,CAAC,GAAGX,OAAO,CAACoB,KAAK,CAAC;IACzC,OAAO;MACL,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAACF,QAAQ,CAACL,OAAO,CAAC,GAAG,YAAY,GAAG,MAAM,GAAGF;IACpE,CAAC;EACH,CAAC,CAAC;EAEF,OAAO;IAAEc,YAAY;IAAEC,WAAW;IAAEF;EAAe,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}