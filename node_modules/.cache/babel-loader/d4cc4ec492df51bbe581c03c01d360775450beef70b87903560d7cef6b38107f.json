{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n/**\n * Gets a reference to the state object.\n */\nfunction getStateReference(app) {\n  return APP_CHECK_STATES.get(app) || Object.assign({}, DEFAULT_STATE);\n}\n/**\n * Set once on initialization. The map should hold the same reference to the\n * same object until this entry is deleted.\n */\nfunction setInitialState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app);\n}\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\n * One day in millis, for certain error code backoffs.\n */\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n  isRunning() {\n    return !!this.pending;\n  }\n  async process(hasSucceeded) {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await sleep(this.getNextRun(hasSucceeded));\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await this.operation();\n      this.pending.resolve();\n      await this.pending.promise;\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ERRORS = {\n  [\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\" /* AppCheckError.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\" /* AppCheckError.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\" /* AppCheckError.STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */]: 'ReCAPTCHA error.',\n  [\"initial-throttle\" /* AppCheckError.INITIAL_THROTTLE */]: `{$httpStatus} error. Attempts allowed again after {$time}`,\n  [\"throttled\" /* AppCheckError.THROTTLED */]: `Requests throttled due to previous {$httpStatus} error. Attempts allowed again after {$time}`\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getRecaptcha(isEnterprise = false) {\n  var _a;\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n  return self.grecaptcha;\n}\nfunction ensureActivated(app) {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */, {\n      appName: app.name\n    });\n  }\n}\nfunction getDurationString(durationInMillis) {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function exchangeToken({\n  url,\n  body\n}, heartbeatServiceProvider) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  // If heartbeat service exists, add heartbeat header string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */, {\n      originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n    });\n  }\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */, {\n      httpStatus: response.status\n    });\n  }\n  let responseBody;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\n      originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\n    });\n  }\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\n      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        var _a;\n        reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\n        originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n      }));\n    }\n  });\n  return dbPromise;\n}\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\nasync function write(key, value) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n    transaction.onerror = event => {\n      var _a;\n      reject(ERROR_FACTORY.create(\"storage-set\" /* AppCheckError.STORAGE_WRITE */, {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\nasync function read(key) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n    transaction.onerror = event => {\n      var _a;\n      reject(ERROR_FACTORY.create(\"storage-get\" /* AppCheckError.STORAGE_GET */, {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logger = new Logger('@firebase/app-check');\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nasync function readTokenFromStorage(app) {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n  return undefined;\n}\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n  return Promise.resolve();\n}\nasync function readOrCreateDebugTokenFromStorage() {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n  if (!existingDebugToken) {\n    // create a new debug token\n    // This function is only available in secure contexts. See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts\n    const newToken = crypto.randomUUID();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated every time the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\nasync function getDebugToken() {\n  const state = getDebugState();\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData), /* webSafe= */false);\n}\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nasync function getToken$2(appCheck, forceRefresh = false, shouldLogErrors = false) {\n  const app = appCheck.app;\n  ensureActivated(app);\n  const state = getStateReference(app);\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token = state.token;\n  let error = undefined;\n  /**\n   * If an invalid token was found in memory, clear token from\n   * memory and unset the local variable `token`.\n   */\n  if (token && !isValid(token)) {\n    state.token = undefined;\n    token = undefined;\n  }\n  /**\n   * If there is no valid token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken) {\n      if (isValid(cachedToken)) {\n        token = cachedToken;\n      } else {\n        // If there was an invalid token in the indexedDB cache, clear it.\n        await writeTokenToStorage(app, undefined);\n      }\n    }\n  }\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    try {\n      // Avoid making another call to the exchange endpoint if one is in flight.\n      if (!state.exchangeTokenPromise) {\n        state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.heartbeatServiceProvider).finally(() => {\n          // Clear promise when settled - either resolved or rejected.\n          state.exchangeTokenPromise = undefined;\n        });\n        shouldCallListeners = true;\n      }\n      const tokenFromDebugExchange = await state.exchangeTokenPromise;\n      // Write debug token to indexedDB.\n      await writeTokenToStorage(app, tokenFromDebugExchange);\n      // Write debug token to state.\n      state.token = tokenFromDebugExchange;\n      return {\n        token: tokenFromDebugExchange.token\n      };\n    } catch (e) {\n      if (e.code === `appCheck/${\"throttled\" /* AppCheckError.THROTTLED */}` || e.code === `appCheck/${\"initial-throttle\" /* AppCheckError.INITIAL_THROTTLE */}`) {\n        // Warn if throttled, but do not treat it as an error.\n        logger.warn(e.message);\n      } else if (shouldLogErrors) {\n        logger.error(e);\n      }\n      // Return dummy token and error\n      return makeDummyTokenResult(e);\n    }\n  }\n  /**\n   * There are no valid tokens in memory or indexedDB and we are not in\n   * debug mode.\n   * Request a new token from the exchange endpoint.\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider.getToken().finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    token = await getStateReference(app).exchangeTokenPromise;\n  } catch (e) {\n    if (e.code === `appCheck/${\"throttled\" /* AppCheckError.THROTTLED */}` || e.code === `appCheck/${\"initial-throttle\" /* AppCheckError.INITIAL_THROTTLE */}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn(e.message);\n    } else if (shouldLogErrors) {\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e;\n  }\n  let interopTokenResult;\n  if (!token) {\n    // If token is undefined, there must be an error.\n    // Return a dummy token along with the error.\n    interopTokenResult = makeDummyTokenResult(error);\n  } else if (error) {\n    if (isValid(token)) {\n      // It's also possible a valid token exists, but there's also an error.\n      // (Such as if the token is almost expired, tries to refresh, and\n      // the exchange request fails.)\n      // We add a special error property here so that the refresher will\n      // count this as a failed attempt and use the backoff instead of\n      // retrying repeatedly with no delay, but any 3P listeners will not\n      // be hindered in getting the still-valid token.\n      interopTokenResult = {\n        token: token.token,\n        internalError: error\n      };\n    } else {\n      // No invalid tokens should make it to this step. Memory and cached tokens\n      // are checked. Other tokens are from fresh exchanges. But just in case.\n      interopTokenResult = makeDummyTokenResult(error);\n    }\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    state.token = token;\n    await writeTokenToStorage(app, token);\n  }\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n/**\n * Internal API for limited use tokens. Skips all FAC state and simply calls\n * the underlying provider.\n */\nasync function getLimitedUseToken$1(appCheck) {\n  const app = appCheck.app;\n  ensureActivated(app);\n  const {\n    provider\n  } = getStateReference(app);\n  if (isDebugMode()) {\n    const debugToken = await getDebugToken();\n    const {\n      token\n    } = await exchangeToken(getExchangeDebugTokenRequest(app, debugToken), appCheck.heartbeatServiceProvider);\n    return {\n      token\n    };\n  } else {\n    // provider is definitely valid since we ensure AppCheck was activated\n    const {\n      token\n    } = await provider.getToken();\n    return {\n      token\n    };\n  }\n}\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getStateReference(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  state.tokenObservers = [...state.tokenObservers, tokenObserver];\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\n}\nfunction removeTokenListener(app, listener) {\n  const state = getStateReference(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n  state.tokenObservers = newObservers;\n}\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  const state = getStateReference(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher(\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  async () => {\n    const state = getStateReference(app);\n    // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n    let result;\n    if (!state.token) {\n      result = await getToken$2(appCheck);\n    } else {\n      result = await getToken$2(appCheck, true);\n    }\n    /**\n     * getToken() always resolves. In case the result has an error field defined, it means\n     * the operation failed, and we should retry.\n     */\n    if (result.error) {\n      throw result.error;\n    }\n    /**\n     * A special `internalError` field reflects that there was an error\n     * getting a new token from the exchange endpoint, but there's still a\n     * previous token that's valid for now and this should be passed to 2P/3P\n     * requests for a token. But we want this callback (`this.operation` in\n     * `Refresher`) to throw in order to kick off the Refresher's retry\n     * backoff. (Setting `hasSucceeded` to false.)\n     */\n    if (result.internalError) {\n      throw result.internalError;\n    }\n  }, () => {\n    return true;\n  }, () => {\n    const state = getStateReference(app);\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000;\n      // Do not allow refresh time to be past (expireTime - 5 minutes)\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\nfunction notifyTokenListeners(app, token) {\n  const observers = getStateReference(app).tokenObservers;\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\" /* ListenerType.EXTERNAL */ && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * AppCheck Service class.\n */\nclass AppCheckService {\n  constructor(app, heartbeatServiceProvider) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n  }\n  _delete() {\n    const {\n      tokenObservers\n    } = getStateReference(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\nfunction factory(app, heartbeatServiceProvider) {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    getLimitedUseToken: () => getLimitedUseToken$1(appCheck),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\nconst name = \"@firebase/app-check\";\nconst version = \"0.10.1\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\nfunction initializeV3(app, siteKey) {\n  const initialized = new Deferred();\n  const state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized\n  };\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nfunction initializeEnterprise(app, siteKey) {\n  const initialized = new Deferred();\n  const state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized\n  };\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app) {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\nasync function getToken$1(app) {\n  ensureActivated(app);\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n    recaptcha.ready(() => {\n      resolve(\n      // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n      recaptcha.execute(reCAPTCHAState.widgetId, {\n        action: 'fire_app_check'\n      }));\n    });\n  });\n}\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible',\n    // Success callback - set state\n    callback: () => {\n      getStateReference(app).reCAPTCHAState.succeeded = true;\n    },\n    // Failure callback - set state\n    'error-callback': () => {\n      getStateReference(app).reCAPTCHAState.succeeded = false;\n    }\n  });\n  const state = getStateReference(app);\n  state.reCAPTCHAState = Object.assign(Object.assign({}, state.reCAPTCHAState), {\n    // state.reCAPTCHAState is set in the initialize()\n    widgetId\n  });\n}\nfunction loadReCAPTCHAV3Script(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nclass ReCaptchaV3Provider {\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\n     * Throttle requests on certain error codes to prevent too many retries\n     * in a short time.\n     */\n    this._throttleData = null;\n  }\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken() {\n    var _a, _b, _c;\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    });\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    }\n    let result;\n    try {\n      result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\n        this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"initial-throttle\" /* AppCheckError.INITIAL_THROTTLE */, {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n  /**\n   * @internal\n   */\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\n   * @internal\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nclass ReCaptchaEnterpriseProvider {\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\n     * Throttle requests on certain error codes to prevent too many retries\n     * in a short time.\n     */\n    this._throttleData = null;\n  }\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken() {\n    var _a, _b, _c;\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    });\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\n      throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\n    }\n    let result;\n    try {\n      result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\n        this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"initial-throttle\" /* AppCheckError.INITIAL_THROTTLE */, {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n  /**\n   * @internal\n   */\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\n   * @internal\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n/**\n * Custom provider class.\n * @public\n */\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\n   * @internal\n   */\n  async getToken() {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n    return Object.assign(Object.assign({}, customToken), {\n      issuedAtTimeMillis\n    });\n  }\n  /**\n   * @internal\n   */\n  initialize(app) {\n    this._app = app;\n  }\n  /**\n   * @internal\n   */\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n}\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(httpStatus, throttleData) {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nfunction initializeAppCheck(app = getApp(), options) {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n    // Not using logger because I don't think we ever want this accidentally hidden.\n    console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\n  }\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */, {\n        appName: app.name\n      });\n    }\n  }\n  const appCheck = provider.initialize({\n    options\n  });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, () => {});\n  }\n  return appCheck;\n}\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(app, provider, isTokenAutoRefreshEnabled = false) {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  const state = setInitialState(app, Object.assign({}, DEFAULT_STATE));\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken;\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n    return cachedToken;\n  });\n  // Global `automaticDataCollectionEnabled` (defaults to true) and\n  // `isTokenAutoRefreshEnabled` must both be true.\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled && app.automaticDataCollectionEnabled;\n  if (!app.automaticDataCollectionEnabled && isTokenAutoRefreshEnabled) {\n    logger.warn('`isTokenAutoRefreshEnabled` is true but ' + '`automaticDataCollectionEnabled` was set to false during' + ' `initializeApp()`. This blocks automatic token refresh.');\n  }\n  state.provider.initialize(app);\n}\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getStateReference(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\n * Get the current App Check token. If `forceRefresh` is false, this function first\n * checks for a valid token in memory, then local persistence (IndexedDB).\n * If not found, or if `forceRefresh` is true, it makes a request to the\n * App Check endpoint for a fresh token. That request attaches\n * to the most recent in-flight request if one is present.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nasync function getToken(appCheckInstance, forceRefresh) {\n  const result = await getToken$2(appCheckInstance, forceRefresh);\n  if (result.error) {\n    throw result.error;\n  }\n  if (result.internalError) {\n    throw result.internalError;\n  }\n  return {\n    token: result.token\n  };\n}\n/**\n * Requests a Firebase App Check token. This method should be used\n * only if you need to authorize requests to a non-Firebase backend.\n *\n * Returns limited-use tokens that are intended for use with your\n * non-Firebase backend endpoints that are protected with\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\n * Replay Protection</a>. This method\n * does not affect the token generation behavior of the\n * #getAppCheckToken() method.\n *\n * @param appCheckInstance - The App Check service instance.\n * @returns The limited use token.\n * @public\n */\nfunction getLimitedUseToken(appCheckInstance) {\n  return getLimitedUseToken$1(appCheckInstance);\n}\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\n * NOTE: Although an `onCompletion` callback can be provided, it will\n * never be called because the token stream is never-ending.\n * It is added only for API consistency with the observer pattern, which\n * we follow in JS APIs.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n  let errorFn = () => {};\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(appCheckInstance, \"EXTERNAL\" /* ListenerType.EXTERNAL */, nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n\n/**\n * The Firebase App Check Web SDK.\n *\n * @remarks\n * Firebase App Check does not work in a Node.js environment using `ReCaptchaV3Provider` or\n * `ReCaptchaEnterpriseProvider`, but can be used in Node.js if you use\n * `CustomProvider` and write your own attestation method.\n *\n * @packageDocumentation\n */\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const heartbeatServiceProvider = container.getProvider('heartbeat');\n    return factory(app, heartbeatServiceProvider);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n  /**\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n   * other Firebase SDKs\n   */.setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  }));\n  // The internal interface used by other Firebase products\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n  registerVersion(name, version);\n}\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"names":["APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getStateReference","app","get","Object","assign","setInitialState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","constructor","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","pending","nextErrorWaitInterval","Error","start","process","catch","stop","reject","isRunning","hasSucceeded","Deferred","promise","_e","sleep","getNextRun","resolve","error","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","ErrorFactory","getRecaptcha","isEnterprise","_a","self","grecaptcha","enterprise","ensureActivated","create","appName","name","getDurationString","durationInMillis","totalSeconds","Math","round","days","floor","hours","minutes","seconds","result","pad","value","toString","exchangeToken","url","body","heartbeatServiceProvider","headers","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","options","method","JSON","stringify","response","fetch","originalError","originalErrorMessage","message","status","httpStatus","responseBody","json","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaV3TokenRequest","reCAPTCHAToken","projectId","appId","apiKey","getExchangeRecaptchaEnterpriseTokenRequest","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","newToken","crypto","randomUUID","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","base64","encodeString","getToken$2","getToken","appCheck","forceRefresh","shouldLogErrors","isValid","cachedToken","cachedTokenPromise","shouldCallListeners","exchangeTokenPromise","finally","tokenFromDebugExchange","code","makeDummyTokenResult","provider","interopTokenResult","internalError","notifyTokenListeners","getLimitedUseToken$1","getLimitedUseToken","addTokenListener","type","listener","onError","tokenObserver","next","validToken","then","initTokenRefresher","removeTokenListener","newObservers","filter","length","tokenRefresher","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","_delete","factory","internalFactory","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","initializeV3","siteKey","reCAPTCHAState","divId","makeDiv","loadReCAPTCHAV3Script","queueWidgetRender","initializeEnterprise","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","getToken$1","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","callback","succeeded","error-callback","onload","script","src","head","ReCaptchaV3Provider","_siteKey","_throttleData","throwIfThrottled","attestedClaimsToken","_app","_heartbeatServiceProvider","_b","includes","setBackoff","_c","customData","time","allowRequestsAfter","initialize","_getProvider","isEqual","otherProvider","ReCaptchaEnterpriseProvider","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","throttleData","backoffCount","backoffMillis","calculateBackoffMillis","initializeAppCheck","getApp","getModularInstance","console","log","isInitialized","existingInstance","initialOptions","getOptions","_activate","automaticDataCollectionEnabled","setTokenAutoRefreshEnabled","appCheckInstance","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","_registerComponent","Component","getProvider","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService","registerVersion","version"],"sources":["../../src/state.ts","../../src/constants.ts","../../src/proactive-refresh.ts","../../src/errors.ts","../../src/util.ts","../../src/client.ts","../../src/indexeddb.ts","../../src/logger.ts","../../src/storage.ts","../../src/debug.ts","../../src/internal-api.ts","../../src/factory.ts","../../src/recaptcha.ts","../../src/providers.ts","../../src/api.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n  // True if the most recent recaptcha check succeeded.\n  succeeded?: boolean;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\n/**\n * Gets a reference to the state object.\n */\nexport function getStateReference(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || { ...DEFAULT_STATE };\n}\n\n/**\n * Set once on initialization. The map should hold the same reference to the\n * same object until this entry is deleted.\n */\nexport function setInitialState(\n  app: FirebaseApp,\n  state: AppCheckState\n): AppCheckState {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app) as AppCheckState;\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  INITIAL_THROTTLE = 'initial-throttle',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.INITIAL_THROTTLE]: `{$httpStatus} error. Attempts allowed again after {$time}`,\n  [AppCheckError.THROTTLED]: `Requests throttled due to previous {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.INITIAL_THROTTLE]: { time: string; httpStatus: number };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getStateReference } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  token: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If heartbeat service exists, add heartbeat header string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: (e as Error)?.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    // This function is only available in secure contexts. See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts\n    const newToken = crypto.randomUUID();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated every time the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getStateReference } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false,\n  shouldLogErrors = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getStateReference(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If an invalid token was found in memory, clear token from\n   * memory and unset the local variable `token`.\n   */\n  if (token && !isValid(token)) {\n    state.token = undefined;\n    token = undefined;\n  }\n\n  /**\n   * If there is no valid token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken) {\n      if (isValid(cachedToken)) {\n        token = cachedToken;\n      } else {\n        // If there was an invalid token in the indexedDB cache, clear it.\n        await writeTokenToStorage(app, undefined);\n      }\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    try {\n      // Avoid making another call to the exchange endpoint if one is in flight.\n      if (!state.exchangeTokenPromise) {\n        state.exchangeTokenPromise = exchangeToken(\n          getExchangeDebugTokenRequest(app, await getDebugToken()),\n          appCheck.heartbeatServiceProvider\n        ).finally(() => {\n          // Clear promise when settled - either resolved or rejected.\n          state.exchangeTokenPromise = undefined;\n        });\n        shouldCallListeners = true;\n      }\n      const tokenFromDebugExchange: AppCheckTokenInternal =\n        await state.exchangeTokenPromise;\n      // Write debug token to indexedDB.\n      await writeTokenToStorage(app, tokenFromDebugExchange);\n      // Write debug token to state.\n      state.token = tokenFromDebugExchange;\n      return { token: tokenFromDebugExchange.token };\n    } catch (e) {\n      if (\n        (e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}` ||\n        (e as FirebaseError).code ===\n          `appCheck/${AppCheckError.INITIAL_THROTTLE}`\n      ) {\n        // Warn if throttled, but do not treat it as an error.\n        logger.warn((e as FirebaseError).message);\n      } else if (shouldLogErrors) {\n        logger.error(e);\n      }\n      // Return dummy token and error\n      return makeDummyTokenResult(e as FirebaseError);\n    }\n  }\n\n  /**\n   * There are no valid tokens in memory or indexedDB and we are not in\n   * debug mode.\n   * Request a new token from the exchange endpoint.\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    token = await getStateReference(app).exchangeTokenPromise;\n  } catch (e) {\n    if (\n      (e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}` ||\n      (e as FirebaseError).code === `appCheck/${AppCheckError.INITIAL_THROTTLE}`\n    ) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else if (shouldLogErrors) {\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // If token is undefined, there must be an error.\n    // Return a dummy token along with the error.\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else if (error) {\n    if (isValid(token)) {\n      // It's also possible a valid token exists, but there's also an error.\n      // (Such as if the token is almost expired, tries to refresh, and\n      // the exchange request fails.)\n      // We add a special error property here so that the refresher will\n      // count this as a failed attempt and use the backoff instead of\n      // retrying repeatedly with no delay, but any 3P listeners will not\n      // be hindered in getting the still-valid token.\n      interopTokenResult = {\n        token: token.token,\n        internalError: error\n      };\n    } else {\n      // No invalid tokens should make it to this step. Memory and cached tokens\n      // are checked. Other tokens are from fresh exchanges. But just in case.\n      interopTokenResult = makeDummyTokenResult(error!);\n    }\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    state.token = token;\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\n/**\n * Internal API for limited use tokens. Skips all FAC state and simply calls\n * the underlying provider.\n */\nexport async function getLimitedUseToken(\n  appCheck: AppCheckService\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const { provider } = getStateReference(app);\n\n  if (isDebugMode()) {\n    const debugToken = await getDebugToken();\n    const { token } = await exchangeToken(\n      getExchangeDebugTokenRequest(app, debugToken),\n      appCheck.heartbeatServiceProvider\n    );\n    return { token };\n  } else {\n    // provider is definitely valid since we ensure AppCheck was activated\n    const { token } = await provider!.getToken();\n    return { token };\n  }\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  state.tokenObservers = [...state.tokenObservers, tokenObserver];\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getStateReference(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  state.tokenObservers = newObservers;\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getStateReference(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      /**\n       * getToken() always resolves. In case the result has an error field defined, it means\n       * the operation failed, and we should retry.\n       */\n      if (result.error) {\n        throw result.error;\n      }\n      /**\n       * A special `internalError` field reflects that there was an error\n       * getting a new token from the exchange endpoint, but there's still a\n       * previous token that's valid for now and this should be passed to 2P/3P\n       * requests for a token. But we want this callback (`this.operation` in\n       * `Refresher`) to throw in order to kick off the Refresher's retry\n       * backoff. (Setting `hasSucceeded` to false.)\n       */\n      if (result.internalError) {\n        throw result.internalError;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getStateReference(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getStateReference(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  getLimitedUseToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getStateReference } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public heartbeatServiceProvider: Provider<'heartbeat'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getStateReference(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): AppCheckService {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    getLimitedUseToken: () => getLimitedUseToken(appCheck),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getStateReference } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible',\n    // Success callback - set state\n    callback: () => {\n      getStateReference(app).reCAPTCHAState!.succeeded = true;\n    },\n    // Failure callback - set state\n    'error-callback': () => {\n      getStateReference(app).reCAPTCHAState!.succeeded = false;\n    }\n  });\n\n  const state = getStateReference(app);\n\n  state.reCAPTCHAState = {\n    ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n    widgetId\n  };\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n  callback: () => void;\n  'error-callback': () => void;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { getStateReference } from './state';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!getStateReference(this._app!).reCAPTCHAState?.succeeded) {\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.INITIAL_THROTTLE, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!getStateReference(this._app!).reCAPTCHAState?.succeeded) {\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.INITIAL_THROTTLE, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getStateReference,\n  getDebugState,\n  DEFAULT_STATE,\n  setInitialState\n} from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  getLimitedUseToken as getLimitedUseTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\nimport { logger } from './logger';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled: boolean = false\n): void {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  const state = setInitialState(app, { ...DEFAULT_STATE });\n\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken;\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Global `automaticDataCollectionEnabled` (defaults to true) and\n  // `isTokenAutoRefreshEnabled` must both be true.\n  state.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled && app.automaticDataCollectionEnabled;\n\n  if (!app.automaticDataCollectionEnabled && isTokenAutoRefreshEnabled) {\n    logger.warn(\n      '`isTokenAutoRefreshEnabled` is true but ' +\n        '`automaticDataCollectionEnabled` was set to false during' +\n        ' `initializeApp()`. This blocks automatic token refresh.'\n    );\n  }\n\n  state.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getStateReference(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\n * Get the current App Check token. If `forceRefresh` is false, this function first\n * checks for a valid token in memory, then local persistence (IndexedDB).\n * If not found, or if `forceRefresh` is true, it makes a request to the\n * App Check endpoint for a fresh token. That request attaches\n * to the most recent in-flight request if one is present.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  if (result.internalError) {\n    throw result.internalError;\n  }\n  return { token: result.token };\n}\n\n/**\n * Requests a Firebase App Check token. This method should be used\n * only if you need to authorize requests to a non-Firebase backend.\n *\n * Returns limited-use tokens that are intended for use with your\n * non-Firebase backend endpoints that are protected with\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\n * Replay Protection</a>. This method\n * does not affect the token generation behavior of the\n * #getAppCheckToken() method.\n *\n * @param appCheckInstance - The App Check service instance.\n * @returns The limited use token.\n * @public\n */\nexport function getLimitedUseToken(\n  appCheckInstance: AppCheck\n): Promise<AppCheckTokenResult> {\n  return getLimitedUseTokenInternal(appCheckInstance as AppCheckService);\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with an\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * The Firebase App Check Web SDK.\n *\n * @remarks\n * Firebase App Check does not work in a Node.js environment using `ReCaptchaV3Provider` or\n * `ReCaptchaEnterpriseProvider`, but can be used in Node.js if you use\n * `CustomProvider` and write your own attestation method.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\n        return factory(app, heartbeatServiceProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}